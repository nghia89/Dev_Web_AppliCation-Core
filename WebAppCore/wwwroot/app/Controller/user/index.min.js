var UserController = function () { function t(t) { $("#txtUserName").prop("disabled", t), $("#txtPassword").prop("disabled", t), $("#txtConfirmPassword").prop("disabled", t) } function e() { t(!1), $("#hidId").val(""), a(), $("#txtFullName").val(""), $("#txtUserName").val(""), $("#txtPassword").val(""), $("#txtConfirmPassword").val(""), $('input[name="ckRoles"]').removeAttr("checked"), $("#txtEmail").val(""), $("#txtPhoneNumber").val(""), $("#ckStatus").prop("checked", !0), $("#txtConfirmPasswordChange").val(""), $("#txtPasswordChange").val("") } function a(t) { $.ajax({ url: "/Admin/Role/GetAll", type: "GET", dataType: "json", async: !1, success: function (e) { var a = $("#role-template").html(), s = e, r = ""; $.each(s, function (e, s) { var n = ""; void 0 !== t && -1 !== t.indexOf(s.Name) && (n = "checked"), r += Mustache.render(a, { Name: s.Name, Description: s.Description, Checked: n }) }), $("#list-roles").html(r) } }) } function s(t) { $.ajax({ type: "GET", url: "/admin/user/GetAllPaging", data: { categoryId: $("#ddl-category-search").val(), keyword: $("#txt-search-keyword").val(), page: structures.configs.pageIndex, pageSize: structures.configs.pageSize }, dataType: "json", beforeSend: function () { structures.startLoading() }, success: function (e) { var a = $("#table-template").html(), r = ""; e.RowCount > 0 ? ($.each(e.Results, function (t, e) { r += Mustache.render(a, { FullName: e.FullName, Id: e.Id, UserName: e.UserName, Avatar: void 0 === e.Avatar ? '<img src="/admin-side/images/user.png" width=25 />' : '<img src="' + e.Avatar + '" width=25 />', DateCreated: structures.dateTimeFormatJson(e.DateCreated), Status: structures.getStatus(e.Status) }) }), $("#lbl-total-records").text(e.RowCount), void 0 !== r && $("#tbl-content").html(r), function (t, e, a) { var s = Math.ceil(t / structures.configs.pageSize); 0 !== $("#paginationUL a").length && !0 !== a || ($("#paginationUL").empty(), $("#paginationUL").removeData("twbs-pagination"), $("#paginationUL").unbind("page")); $("#paginationUL").twbsPagination({ totalPages: s, visiblePages: 7, first: "Đầu", prev: "Trước", next: "Tiếp", last: "Cuối", onPageClick: function (t, a) { structures.configs.pageIndex = a, setTimeout(e(), 200) } }) }(e.RowCount, function () { s() }, t)) : $("#tbl-content").html(""), structures.stopLoading() }, error: function (t) { console.log(t) } }) } this.initialize = function () { s(), $("#frmMaintainance").validate({ errorClass: "red", ignore: [], lang: "en", rules: { txtFullName: { required: !0 }, txtUserName: { required: !0 }, txtPassword: { required: !0, minlength: 6 }, txtConfirmPassword: { equalTo: "#txtPassword" }, txtEmail: { required: !0, email: !0 } }, messages: { txtConfirmPassword: { required: "Bạn phải điền tên pass", equalTo: "pass không khớp với nhau" } } }), $("#frmMaintainanceChangePass").validate({ errorClass: "red", ignore: [], lang: "en", rules: { txtPasswordChange: { required: !0, minlength: 6 }, txtConfirmPasswordChange: { equalTo: "#txtConfirmPasswordChange" } }, messages: { txtConfirmPassword: { required: "Bạn phải điền mật khẩu.", equalTo: "Mật khẩu không khớp với nhau vui lòng điền lại." } } }), $("#txt-search-keyword").keypress(function (t) { 13 === t.which && (t.preventDefault(), s()) }), $("#btn-search").on("click", function () { s() }), $("#ddl-show-page").on("change", function () { structures.configs.pageSize = $(this).val(), structures.configs.pageIndex = 1, s(!0) }), $("#btn-create").on("click", function () { e(), a(), $("#modal-add-edit").modal("show") }), $("body").on("click", ".btn-edit-pass", function (e) { e.preventDefault(), t(!1); var a = $(this).data("id"); $.ajax({ type: "GET", url: "/Admin/User/GetById", data: { id: a }, dataType: "json", beforeSend: function () { structures.startLoading() }, success: function (e) { var a = e; $("#hidId").val(a.Id), $("#FullName").val(a.FullName), t(!0), $("#modal-edit-pass").modal("show"), structures.stopLoading() }, error: function () { structures.notify("Có lỗi xảy ra", "error"), structures.stopLoading() } }) }), $("#btnSave-pass").on("click", function (t) { if ($("#frmMaintainanceChangePass").valid()) { t.preventDefault(); var a = $("#hidId").val(), r = $("#txtPasswordChange").val(), n = $("#txtConfirmPasswordChange").val(); $.ajax({ type: "POST", url: "/Admin/User/changepassword", data: { Id: a, Password: r, passWordConfirm: n }, dataType: "json", beforeSend: function () { structures.startLoading() }, success: function (t) { !1 !== t ? (structures.notify("Save user succesful", "success"), $("#modal-edit-pass").modal("hide"), e(), structures.stopLoading(), s(!0)) : (structures.notify("Có lổi khi thay dổi mật khẩu", "error"), structures.stopLoading()) }, error: function (t) { var e = t.responseJSON.Message; structures.notify(e, "error"), structures.stopLoading() } }) } return e(), !1 }), $("body").on("click", ".btn-edit", function (e) { e.preventDefault(); var s = $(this).data("id"); $.ajax({ type: "GET", url: "/Admin/User/GetById", data: { id: s }, dataType: "json", beforeSend: function () { structures.startLoading() }, success: function (e) { var s = e; $("#hidId").val(s.Id), $("#txtFullName").val(s.FullName), $("#txtUserName").val(s.UserName), $("#txtEmail").val(s.Email), $("#txtPhoneNumber").val(s.PhoneNumber), $("#ckStatus").prop("checked", 1 === s.Status), a(s.Roles), t(!0), $("#modal-add-edit").modal("show"), structures.stopLoading() }, error: function () { structures.notify("Có lỗi xảy ra", "error"), structures.stopLoading() } }) }), $("#btnSave").on("click", function (t) { if ($("#frmMaintainance").valid()) { t.preventDefault(); var a = $("#hidId").val(), r = $("#txtFullName").val(), n = $("#txtUserName").val(), o = $("#txtPassword").val(), i = $("#txtEmail").val(), u = $("#txtPhoneNumber").val(), d = []; $.each($('input[name="ckRoles"]'), function (t, e) { !0 === $(e).prop("checked") && d.push($(e).prop("value")) }); var c = !0 === $("#ckStatus").prop("checked") ? 1 : 0; $.ajax({ type: "POST", url: "/Admin/User/SaveEntity", data: { Id: a, FullName: r, UserName: n, Password: o, Email: i, PhoneNumber: u, Status: c, Roles: d }, dataType: "json", beforeSend: function () { structures.startLoading() }, success: function (t) { !1 !== t ? (structures.notify("Save user succesful", "success"), $("#modal-add-edit").modal("hide"), e(), structures.stopLoading(), s(!0)) : (structures.notify("Email hoặc tài khoản đã tồn tại", "error"), structures.stopLoading()) } }) } return !1 }), $("body").on("click", ".btn-delete", function (t) { t.preventDefault(); var e = $(this).data("id"); structures.confirm("Are you sure to delete?", function () { $.ajax({ type: "POST", url: "/Admin/User/Delete", data: { id: e }, beforeSend: function () { structures.startLoading() }, success: function () { structures.notify("Delete successful", "success"), structures.stopLoading(), s() }, error: function () { structures.notify("Has an error", "error"), structures.stopLoading() } }) }) }) } };