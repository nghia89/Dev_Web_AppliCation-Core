var PageController = function () { function t() { $("#hidIdM").val(0), $("#txtNameM").val(""), $("#txtAliasM").val(""), CKEDITOR.instances.txtContentM.setData(""), $("#ckStatusM").prop("checked", !0) } function e(t) { $.ajax({ type: "GET", url: "/admin/page/GetAllPaging", data: { keyword: $("#txt-search-keyword").val(), page: structures.configs.pageIndex, pageSize: structures.configs.pageSize }, dataType: "json", beforeSend: function () { structures.startLoading() }, success: function (a) { var n = $("#table-template").html(), s = ""; a.RowCount > 0 ? ($.each(a.Results, function (t, e) { s += Mustache.render(n, { Name: e.Name, Alias: e.Alias, Id: e.Id, Status: structures.getStatus(e.Status) }) }), $("#lbl-total-records").text(a.RowCount), void 0 !== s && $("#tbl-content").html(s), function (t, e, a) { var n = Math.ceil(t / structures.configs.pageSize); 0 !== $("#paginationUL a").length && !0 !== a || ($("#paginationUL").empty(), $("#paginationUL").removeData("twbs-pagination"), $("#paginationUL").unbind("page")); $("#paginationUL").twbsPagination({ totalPages: n, visiblePages: 7, first: "Đầu", prev: "Trước", next: "Tiếp", last: "Cuối", onPageClick: function (t, a) { structures.configs.pageIndex = a, setTimeout(e(), 200) } }) }(a.RowCount, function () { e() }, t)) : $("#tbl-content").html(""), structures.stopLoading() }, error: function (t) { console.log(t) } }) } this.initialize = function () { e(), $("#frmMaintainance").validate({ errorClass: "red", ignore: [], lang: "en", rules: { txtNameM: { required: !0 }, txtAliasM: { required: !0 } } }), $("#txt-search-keyword").keypress(function (t) { 13 === t.which && (t.preventDefault(), e()) }), $("#btn-search").on("click", function () { e() }), $("#ddl-show-page").on("change", function () { structures.configs.pageSize = $(this).val(), structures.configs.pageIndex = 1, e(!0) }), $("#btn-create").on("click", function () { t(), $("#modal-add-edit").modal("show") }), $("body").on("click", ".btn-edit", function (t) { t.preventDefault(); var e = $(this).data("id"); $.ajax({ type: "GET", url: "/Admin/Page/GetById", data: { id: e }, dataType: "json", beforeSend: function () { structures.startLoading() }, success: function (t) { var e = t; $("#hidIdM").val(e.Id), $("#txtNameM").val(e.Name), $("#txtAliasM").val(e.Alias), CKEDITOR.instances.txtContentM.setData(e.Content), $("#ckStatusM").prop("checked", 1 === e.Status), $("#modal-add-edit").modal("show"), structures.stopLoading() }, error: function () { structures.notify("Có lỗi xảy ra", "error"), structures.stopLoading() } }) }), $("#btnSaveM").on("click", function (a) { if ($("#frmMaintainance").valid()) { a.preventDefault(); var n = $("#hidIdM").val(), s = $("#txtNameM").val(), o = $("#txtAliasM").val(), r = CKEDITOR.instances.txtContentM.getData(), i = !0 === $("#ckStatusM").prop("checked") ? 1 : 0; return $.ajax({ type: "POST", url: "/Admin/Page/SaveEntity", data: { Id: n, Name: s, Content: r, Status: i, Alias: o }, dataType: "json", beforeSend: function () { structures.startLoading() }, success: function () { structures.notify("Update page successful", "success"), $("#modal-add-edit").modal("hide"), t(), structures.stopLoading(), e(!0) }, error: function () { structures.notify("Have an error in progress", "error"), structures.stopLoading() } }), !1 } return !1 }), $("body").on("click", ".btn-delete", function (t) { t.preventDefault(); var a = $(this).data("id"); structures.confirm("Are you sure to delete?", function () { $.ajax({ type: "POST", url: "/Admin/Page/Delete", data: { id: a }, dataType: "json", beforeSend: function () { structures.startLoading() }, success: function () { structures.notify("Delete page successful", "success"), structures.stopLoading(), e() }, error: function () { structures.notify("Have an error in progress", "error"), structures.stopLoading() } }) }) }), CKEDITOR.replace("txtContentM", { filebrowserImageUploadUrl: "/Admin/Upload/UploadImageForCKEditor?type=Images" }), $.fn.modal.Constructor.prototype.enforceFocus = function () { $(document).off("focusin.bs.modal").on("focusin.bs.modal", $.proxy(function (t) { this.$element[0] === t.target || this.$element.has(t.target).length || $(t.target).closest(".cke_dialog, .cke").length || this.$element.trigger("focus") }, this)) } } };