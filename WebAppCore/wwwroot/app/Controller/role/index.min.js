var RoleController = function () { function e() { $("#hidId").val(""), $("#txtName").val(""), $("#txtDescription").val("") } function t(e) { $.ajax({ type: "GET", url: "/admin/role/GetAllPaging", data: { keyword: $("#txt-search-keyword").val(), page: structures.configs.pageIndex, pageSize: structures.configs.pageSize }, dataType: "json", beforeSend: function () { structures.startLoading() }, success: function (c) { var n = $("#table-template").html(), o = ""; c.RowCount > 0 ? ($.each(c.Results, function (e, t) { o += Mustache.render(n, { Name: t.Name, Id: t.Id, Description: t.Description }) }), $("#lbl-total-records").text(c.RowCount), void 0 !== o && $("#tbl-content").html(o), function (e, t, c) { var n = Math.ceil(e / structures.configs.pageSize); 0 !== $("#paginationUL a").length && !0 !== c || ($("#paginationUL").empty(), $("#paginationUL").removeData("twbs-pagination"), $("#paginationUL").unbind("page")); $("#paginationUL").twbsPagination({ totalPages: n, visiblePages: 7, first: "Đầu", prev: "Trước", next: "Tiếp", last: "Cuối", onPageClick: function (e, c) { structures.configs.pageIndex = c, setTimeout(t(), 200) } }) }(c.RowCount, function () { t() }, e)) : $("#tbl-content").html(""), structures.stopLoading() }, error: function (e) { console.log(e) } }) } this.initialize = function () { t(), $("#frmMaintainance").validate({ errorClass: "red", ignore: [], lang: "vi", rules: { txtName: { required: !0 } } }), $("#txt-search-keyword").keypress(function (e) { 13 === e.which && (e.preventDefault(), t()) }), $("#btn-search").on("click", function () { t() }), $("#ddl-show-page").on("change", function () { structures.configs.pageSize = $(this).val(), structures.configs.pageIndex = 1, t(!0) }), $("#btn-create").on("click", function () { e(), $("#modal-add-edit").modal("show") }), $("body").on("click", ".btn-grant", function () { var e, t; $("#hidRoleId").val($(this).data("id")), $.when($.ajax({ type: "GET", url: "/admin/Function/GetAll", dataType: "json", beforeSend: function () { structures.startLoading() }, success: function (e) { var c = $("#result-data-function").html(), n = ""; $.each(e, function (e, t) { n += Mustache.render(c, { Name: t.Name, treegridparent: null !== t.ParentId ? "treegrid-parent-" + t.ParentId : "", Id: t.Id, AllowCreate: t.AllowCreate ? "checked" : "", AllowEdit: t.AllowEdit ? "checked" : "", AllowView: t.AllowView ? "checked" : "", AllowDelete: t.AllowDelete ? "checked" : "", Status: structures.getStatus(t.Status) }) }), void 0 !== n && $("#lst-data-function").html(n), $(".tree").treegrid(), $("#ckCheckAllView").on("click", function () { $(".ckView").prop("checked", $(this).prop("checked")) }), $("#ckCheckAllCreate").on("click", function () { $(".ckAdd").prop("checked", $(this).prop("checked")) }), $("#ckCheckAllEdit").on("click", function () { $(".ckEdit").prop("checked", $(this).prop("checked")) }), $("#ckCheckAllDelete").on("click", function () { $(".ckDelete").prop("checked", $(this).prop("checked")) }), $(".ckView").on("click", function () { $(".ckView:checked").length === e.length ? $("#ckCheckAllView").prop("checked", !0) : $("#ckCheckAllView").prop("checked", !1) }), $(".ckAdd").on("click", function () { $(".ckAdd:checked").length === e.length ? $("#ckCheckAllCreate").prop("checked", !0) : $("#ckCheckAllCreate").prop("checked", !1) }), $(".ckEdit").on("click", function () { $(".ckEdit:checked").length === e.length ? $("#ckCheckAllEdit").prop("checked", !0) : $("#ckCheckAllEdit").prop("checked", !1) }), $(".ckDelete").on("click", function () { $(".ckDelete:checked").length === e.length ? $("#ckCheckAllDelete").prop("checked", !0) : $("#ckCheckAllDelete").prop("checked", !1) }), void 0 !== t && t(), structures.stopLoading() }, error: function (e) { console.log(e) } })).done((e = $("#hidRoleId").val(), $.ajax({ type: "POST", url: "/Admin/Role/ListAllFunction", data: { roleId: e }, dataType: "json", beforeSend: function () { structures.stopLoading() }, success: function (e) { var t = e; $.each($("#tblFunction tbody tr"), function (e, c) { $.each(t, function (e, t) { t.FunctionId === $(c).data("id") && ($(c).find(".ckView").first().prop("checked", t.CanRead), $(c).find(".ckAdd").first().prop("checked", t.CanCreate), $(c).find(".ckEdit").first().prop("checked", t.CanUpdate), $(c).find(".ckDelete").first().prop("checked", t.CanDelete)) }) }), $(".ckView:checked").length === $("#tblFunction tbody tr .ckView").length ? $("#ckCheckAllView").prop("checked", !0) : $("#ckCheckAllView").prop("checked", !1), $(".ckAdd:checked").length === $("#tblFunction tbody tr .ckAdd").length ? $("#ckCheckAllCreate").prop("checked", !0) : $("#ckCheckAllCreate").prop("checked", !1), $(".ckEdit:checked").length === $("#tblFunction tbody tr .ckEdit").length ? $("#ckCheckAllEdit").prop("checked", !0) : $("#ckCheckAllEdit").prop("checked", !1), $(".ckDelete:checked").length === $("#tblFunction tbody tr .ckDelete").length ? $("#ckCheckAllDelete").prop("checked", !0) : $("#ckCheckAllDelete").prop("checked", !1), structures.stopLoading() }, error: function (e) { console.log(e) } }))), $("#modal-grantpermission").modal("show") }), $("body").on("click", ".btn-edit", function (e) { e.preventDefault(); var t = $(this).data("id"); $.ajax({ type: "GET", url: "/Admin/Role/GetById", data: { id: t }, dataType: "json", beforeSend: function () { structures.startLoading() }, success: function (e) { var t = e; $("#hidId").val(t.Id), $("#txtName").val(t.Name), $("#txtDescription").val(t.Description), $("#modal-add-edit").modal("show"), structures.stopLoading() }, error: function (e) { structures.notify("Có lỗi xảy ra", "error"), structures.stopLoading() } }) }), $("#btnSave").on("click", function (c) { if ($("#frmMaintainance").valid()) { c.preventDefault(); var n = $("#hidId").val(), o = $("#txtName").val(), i = $("#txtDescription").val(); return $.ajax({ type: "POST", url: "/Admin/Role/SaveEntity", data: { Id: n, Name: o, Description: i }, dataType: "json", beforeSend: function () { structures.startLoading() }, success: function (c) { structures.notify("Update role successful", "success"), $("#modal-add-edit").modal("hide"), e(), structures.stopLoading(), t(!0) }, error: function () { structures.notify("Has an error", "error"), structures.stopLoading() } }), !1 } }), $("body").on("click", ".btn-delete", function (e) { e.preventDefault(); var c = $(this).data("id"); structures.confirm("Are you sure to delete?", function () { $.ajax({ type: "POST", url: "/Admin/Role/Delete", data: { id: c }, beforeSend: function () { structures.startLoading() }, success: function (e) { structures.notify("Delete successful", "success"), structures.stopLoading(), t() }, error: function (e) { structures.notify("Has an error in deleting progress", "error"), structures.stopLoading() } }) }) }), $("#btnSavePermission").off("click").on("click", function () { var e = []; $.each($("#tblFunction tbody tr"), function (t, c) { e.push({ RoleId: $("#hidRoleId").val(), FunctionId: $(c).data("id"), CanRead: $(c).find(".ckView").first().prop("checked"), CanCreate: $(c).find(".ckAdd").first().prop("checked"), CanUpdate: $(c).find(".ckEdit").first().prop("checked"), CanDelete: $(c).find(".ckDelete").first().prop("checked") }) }), $.ajax({ type: "POST", url: "/admin/role/SavePermission", data: { listPermmission: e, roleId: $("#hidRoleId").val() }, beforeSend: function () { structures.startLoading() }, success: function (e) { structures.notify("Save permission successful", "success"), $("#modal-grantpermission").modal("hide"), structures.stopLoading() }, error: function () { structures.notify("Has an error in save permission progress", "error"), structures.stopLoading() } }) }) } };